
/*
class Solution{
  public:


bool solve(vector<vector<int>>&dp,string p,string s,int i,int j){
  
  
  //base case
  
  if(i<0 && j<0)return true;
   if(i<0)return false;
   if(j<0){
      while(i>=0){
          if(p[i]!='*')return false;
          i--;
      }
      return true;
  }
  
  
    
    
    
  //memo
  if(dp[i][j]!=-1)return dp[i][j];
  
  
  //recurrence relation  
   
  if(p[i]==s[j] || p[i]=='?')return dp[i][j]=solve(dp,p,s,i-1,j-1);
  
  else if(p[i]=='*')return dp[i][j]=(solve(dp,p,s,i-1,j) || solve(dp,p,s,i,j-1));
  
  else return false;
    
    
}







int wildCard(string p,string s){
     
     int l1=p.size();
     int l2=s.size();
     
     vector<vector<int>>dp(l1,vector<int>(l2+1,-1));
     
     return solve(dp,p,s,l1-1,l2-1);
        

    }
};


*/







//tabulation 


/*
class Solution{
  public:


int wildCard(string s1,string s2){
     
     int l1=s1.size();
     int l2=s2.size();
     
     vector<vector<int>>dp(l1+1,vector<int>(l2+1,0));
     
   dp[0][0]=1;
   
   for(int i=1;i<=l1;i++){
       
      for(int k=1;k<=i;k++){
           if(s1[k-1]=='*')dp[k][0]=1;
           else break;
       }
       
   }
 
 
 
for(int i=1;i<=l1;i++){
    for(int j=1;j<=l2;j++){
        
     if(s1[i-1]==s2[j-1] || s1[i-1]=='?')dp[i][j]=dp[i-1][j-1];
     
     else if(s1[i-1]=='*')dp[i][j]=(dp[i-1][j] || dp[i][j-1]);
     
        
    }
} 
 

 return dp[l1][l2];
 
    }
};

*/

